str(iPhoneRFE)
corrplot(cor(factorsFIN), method = "pie")
corrplot(cor(iphoneRFE), method = "pie")
str(iPhoneRFE)
iphoneRFE
set.seed(123)
part.index <- createDataPartition(iphoneRFE$iphonesentiment,
p = 0.75,
list = FALSE)
iTrain <- iphoneRFE[ part.index,]
irisTest  <- iphoneRFE[-part.index,]
this library for testing different ML algo at the same time#
library(caretEnsemble)
set.seed(123)
my_control <- trainControl(method = "cv",
number = 3,
savePredictions = "final")
set.seed(222)
model_list <- caretList(iTrain, iTrain$iphonesentiment,
trControl = my_control,
methodList = c("kknn", "knn"),
tuneList = NULL,
continue_on_fail = FALSE,
preProcess = c("center","scale"))
options(digits = 3)
model_results <- data.frame(
KNN = min(model_list$lm$knn$RMSE),
KKNN = min(model_list$kknn$results$RMSE))
print(model_results)
model_results <- data.frame(
KNN = min(model_list$lm$knn$RMSE),
KKNN = min(model_list$kknn$results$RMSE))
model_list <- caretList(iTrain, iTrain$iphonesentiment,
trControl = my_control,
methodList = c("kknn", "knn"),
tuneList = NULL,
continue_on_fail = FALSE,
preProcess = c("center","scale"))
set.seed(123)
my_control <- trainControl(method = "cv",
number = 3,
savePredictions = "final")
set.seed(222)
model_list <- caretList(iTrain, iTrain$iphonesentiment,
trControl = my_control,
methodList = c("kknn", "knn"),
tuneList = NULL,
continue_on_fail = FALSE,
preProcess = c("center","scale"))
options(digits = 3)
# Find how many cores are on your machine
detectCores() # Result = Typically 4 to 6
# Create Cluster with desired number of cores. Don't use them all! Your computer is running other processes.
cl <- makeCluster(2)
# Register Cluster
registerDoParallel(cl)
# Confirm how many cores are now "assigned" to R and RStudio
getDoParWorkers() # Result 2
library(caretEnsemble)
set.seed(123)
my_control <- trainControl(method = "cv",
number = 3,
savePredictions = "final")
set.seed(222)
model_list <- caretList(iTrain, iTrain$iphonesentiment,
trControl = my_control,
methodList = c("kknn", "knn"),
tuneList = NULL,
continue_on_fail = FALSE,
preProcess = c("center","scale"))
set.seed(222)
model_list <- caretList(iTrain, iTrain$iphonesentiment,
trControl = my_control,
methodList = c("kknn", "knn"),
tuneList = NULL,
continue_on_fail = FALSE,
preProcess = c("center","scale"))
options(digits = 3)
model_results <- data.frame(
KNN = min(model_list$lm$knn$RMSE),
KKNN = min(model_list$kknn$results$RMSE))
print(model_results)
my_control <- trainControl(method = "cv",
number = 3,
savePredictions = "final")
library(readr)
library(ggplot2)
library(doParallel)
library(plotly)
library(caret)
library(corrplot)
# Find how many cores are on your machine
detectCores() # Result = Typically 4 to 6
# Create Cluster with desired number of cores. Don't use them all! Your computer is running other processes.
cl <- makeCluster(2)
# Register Cluster
registerDoParallel(cl)
# Confirm how many cores are now "assigned" to R and RStudio
getDoParWorkers() # Result 2
set.seed(123)
part.index <- createDataPartition(iphoneRFE$iphonesentiment,
p = 0.75,
list = FALSE)
iTrain <- iphoneRFE[ part.index,]
irisTest  <- iphoneRFE[-part.index,]
library(caretEnsemble)
set.seed(123)
my_control <- trainControl(method = "cv",
number = 3,
savePredictions = "final")
set.seed(222)
model_list <- caretList(iTrain, iTrain$iphonesentiment,
trControl = my_control,
methodList = c("kknn", "knn"),
tuneList = NULL,
continue_on_fail = FALSE,
preProcess = c("center","scale"))
options(digits = 3)
model_results <- data.frame(
KNN = min(model_list$lm$knn$RMSE),
KKNN = min(model_list$kknn$results$RMSE))
print(model_results)
model_list <- caretList(iTrain, iTrain$iphonesentiment,
trControl = my_control,
methodList = c("kknn", "knn"),
tuneList = NULL,
continue_on_fail = FALSE,
preProcess = c("center","scale"))
model_results <- data.frame(
KNN = min(model_list$lm$knn$),
KKNN = min(model_list$kknn$results$))
model_results
model_results <- data.frame(KNN = min(model_list$knn$results$kappa), KKNN = min(model_list$kknn$results$kappa
print(model_results)
model_results <- data.frame(KNN = min(model_list$knn$results$kappa), KKNN = min(model_list$kknn$results$kappa))
model_results <- data.frame(KNN = min(model_list$knn$results$kappa), KKNN = min(model_list$kknn$results$kappa))
model_results <-data.frame(KNN = min(model_list$knn$results$kappa), KKNN = min(model_list$kknn$results$kappa))
print(model_results)
model_results <- data.frame(
LM = min(model_list$lm$results$RMSE),
SVM = min(model_list$svmRadial$results$RMSE),
RF = min(model_list$rf$results$RMSE),
XGBT = min(model_list$xgbTree$results$RMSE),
XGBL = min(model_list$xgbLinear$results$RMSE)
)
print(model_results)
model_list <- caretList(iTrain, iTrain$iphonesentiment,
trControl = my_control,
methodList = c("kknn", "knn"),
tuneList = NULL,
continue_on_fail = FALSE,
preProcess = c("center","scale"))
library(readr)
library(ggplot2)
library(doParallel)
library(plotly)
library(caret)
library(corrplot)
detectCores() # Result = Typically 4 to 6
# Create Cluster with desired number of cores. Don't use them all! Your computer is running other processes.
cl <- makeCluster(2)
# Register Cluster
registerDoParallel(cl)
# Confirm how many cores are now "assigned" to R and RStudio
getDoParWorkers() # Result 2
plot_ly(iphone, x= ~iphonesentiment, type='histogram')
nzvMetrics <- nearZeroVar(iphone, saveMetrics = TRUE)
nzvMetrics
nzv <- nearZeroVar(iphone, saveMetrics = FALSE)
nzv
rfeResults
# Plot results
plot(rfeResults, type=c("g", "o"))
iphoneRFE <- iphone[,predictors(rfeResults)]
iphoneRFE
iphoneRFE$iphonesentiment <- iphone$iphonesentiment
str(iPhoneRFE)
iPhoneRFE
# review outcome
iPhoneRFE
iPhoneRFE
# review outcome
iphoneRFE
iTrain <- iphoneRFE[ part.index,]
iTest  <- iphoneRFE[-part.index,]
library(caretEnsemble)
set.seed(123)
my_control <- trainControl(method = "cv",
number = 3,
savePredictions = "final")
set.seed(222)
model_list <- caretList(iTrain, iTrain$iphonesentiment,
trControl = my_control,
methodList = c("kknn", "knn"),
tuneList = NULL,
continue_on_fail = FALSE,
preProcess = c("center","scale"))
model_list <- caretList(iTrain, iTrain$iphonesentiment,
trControl = my_control,
methodList = c("kknn", "knn"),
continue_on_fail = FALSE,
preProcess = c("center","scale"))
model_list <- caretList(iTrain,
trControl = my_control,
methodList = c("kknn", "knn"),
continue_on_fail = FALSE,
preProcess = c("center","scale"))
model_list <- caretList(iTrain, iTrain$iphonesentiment
trControl = my_control,
methodList = c("kknn", "knn"),
continue_on_fail = FALSE,
preProcess = c("center","scale"))
model_list <- caretList(iTrain, iTrain$iphonesentiment
trControl = my_control,
methodList = c("kknn", "knn"),
continue_on_fail = FALSE,
preProcess = c("center","scale"))
library(caretEnsemble)
set.seed(123)
my_control <- trainControl(method = "cv",
number = 3,
savePredictions = "final")
set.seed(222)
model_list <- caretList(iTrain, iTrain$iphonesentiment
trControl = my_control,
methodList = c("kknn", "knn"),
continue_on_fail = FALSE,
preProcess = c("center","scale"))
my_control
model_list <- caretList(iTrain, iphonesentiment
trControl = my_control,
methodList = c("kknn","knn"),
continue_on_fail = FALSE,
preProcess = c("center","scale"))
model_list <- caretList(iTrain, iTrain$iphonesentiment
trControl = my_control,
methodList = c("kknn","knn"),
preProcess = c("center","scale"))
model_list <- caretList(iTrain, iTrain$iphonesentiment
trControl = my_control,
methodList = c("kknn","knn"))
model_list <- caretList(iTrain, iTrain$iphonesentiment,
trControl = my_control,
methodList = c("kknn","knn"))
options(digits = 3)
model_results <-data.frame(KNN = min(model_list$knn$results$kappa), KKNN = min(model_list$kknn$results$kappa))
print(model_results)
model_list <- caretList(iTrain, iTrain$iphonesentiment,
trControl = my_control,
methodList = c("kknn","knn"))
model_results
library(readr)
library(ggplot2)
library(doParallel)
library(plotly)
library(caret)
library(corrplot)
factorsFIN <- read_csv("concat_factorsFIN.csv")
websitesFIN <- read_csv("concat_websitesFIN.csv")
iphone <- read_csv("iphone_smallmatrix_labeled_8d.csv")
galaxy <- read_csv("galaxy_smallmatrix_labeled_9d (1).csv")
library(readr)
library(ggplot2)
library(doParallel)
library(plotly)
library(caret)
library(corrplot)
factorsFIN <- read_csv("concat_factorsFIN.csv")
websitesFIN <- read_csv("concat_websitesFIN.csv")
iphone <- read_csv("iphone_smallmatrix_labeled_8d.csv")
galaxy <- read_csv("galaxy_smallmatrix_labeled_9d (1).csv")
etectCores() # Result = Typically 4 to 6
# Create Cluster with desired number of cores. Don't use them all! Your computer is running other processes.
cl <- makeCluster(2)
# Register Cluster
registerDoParallel(cl)
# Confirm how many cores are now "assigned" to R and RStudio
getDoParWorkers() # Result 2
rfeResults
# Plot results
plot(rfeResults, type=c("g", "o"))
iphoneRFE <- iphone[,predictors(rfeResults)]
iphoneRFE
# add the dependent variable to iphoneRFE
iphoneRFE$iphonesentiment <- iphone$iphonesentiment
# review outcome
str(iPhoneRFE)
# review outcome
str(iphoneRFE)
corrplot(cor(factorsFIN), method = "pie")
corrplot(cor(iphoneRFE), method = "pie")
part.index <- createDataPartition(iphoneRFE$iphonesentiment,
p = 0.75,
list = FALSE)
iTrain <- iphoneRFE[ part.index,]
irisTest  <- iphoneRFE[-part.index,]
iTrain <- iphoneRFE[ part.index,]
iTest  <- iphoneRFE[-part.index,]
rm(irisTest)
library(caretEnsemble)
set.seed(123)
my_control <- trainControl(method = "cv",
number = 3,
savePredictions = "final")
set.seed(222)
model_list <- caretList(iTrain, iTrain$iphonesentiment,
trControl = my_control,
methodList = c("lm", "svmRadial",
"xgbTree", "xgbLinear"),
tuneList = NULL,
continue_on_fail = FALSE,
preProcess = c("center","scale"))
options(digits = 3)
model_results <- data.frame(
LM = min(model_list$lm$results$RMSE),
SVM = min(model_list$svmRadial$results$RMSE),
XGBT = min(model_list$xgbTree$results$RMSE),
XGBL = min(model_list$xgbLinear$results$RMSE)
)
print(model_results)
resamples <- resamples(model_list)
dotplot(resamples, metric = "RMSE")
pred_lm <- predict.train(model_list$lm, newdata = iTest)
pred_svm <- predict.train(model_list$svmRadial, newdata = iTest)
pred_xgbT <- predict.train(model_list$xgbTree, newdata = iTest)
pred_xgbL <- predict.train(model_list$xgbLinear, newdata = iTest)
pred_RMSE <- data.frame(ensemble_1 = RMSE(predict_ens1, y_test),
ensemble_2 = RMSE(predict_ens2, y_test),
LM = RMSE(pred_lm, y_test),
SVM = RMSE(pred_svm, y_test),
XGBT = RMSE(pred_xgbT, y_test),
XGBL = RMSE(pred_xgbL, y_test))
print(pred_RMSE)
pred_RMSE <- data.frame(
LM = RMSE(pred_lm, y_test),
SVM = RMSE(pred_svm, y_test),
XGBT = RMSE(pred_xgbT, y_test),
XGBL = RMSE(pred_xgbL, y_test))
pred_RMSE <- data.frame(
LM = RMSE(pred_lm, iTest$iphonesentiment),
SVM = RMSE(pred_svm, iTest$iphonesentiment),
XGBT = RMSE(pred_xgbT, iTest$iphonesentiment),
XGBL = RMSE(pred_xgbL, iTest$iphonesentiment))
print(pred_RMSE)
pred_lm <- predict.train(model_list$lm, newdata = iTest$iphonesentiment)
pred_svm <- predict.train(model_list$svmRadial, newdata = iTest$iphonesentiment)
pred_xgbT <- predict.train(model_list$xgbTree, newdata = iTest$iphonesentiment)
pred_xgbL <- predict.train(model_list$xgbLinear, newdata = iTest$iphonesentiment)
print(pred_RMSE)
getwd()
setwd
getwd()
setwd(/Users/gherardolattanzi/Desktop/sentimentanalysis/Sentiment)
setwd(Users/gherardolattanzi/Desktop/sentimentanalysis/Sentiment)
setwd("Users/gherardolattanzi/Desktop/sentimentanalysis/Sentiment")
setwd("/Users/gherardolattanzi/Desktop/sentimentanalysis/Sentiment")
print(pred_RMSE)
pred_svm <- predict.train(model_list$svmRadial, newdata = iTest)
pred_svm
set.seed(123)
my_control <- trainControl(method = "cv",
number = 3,
savePredictions = "final")
set.seed(222)
model_list <- caretList(iTrain, iTrain$iphonesentiment,
trControl = my_control,
methodList = c("kknn", "knn"))
library(caretEnsemble)
options(digits = 3)
model_results <-data.frame(KNN = min(model_list$knn$results$kappa), KKNN = min(model_list$kknn$results$kappa))
print(model_results)
resamples <- resamples(model_list)
dotplot(resamples, metric = "RMSE")
pred_lm <- predict.train(model_list$kknn, newdata = irisTest)
pred_svm <- predict.train(model_list$knn, newdata = irisTest)
library(readr)
library(ggplot2)
library(doParallel)
library(plotly)
library(caret)
library(corrplot)
detectCores() # Result = Typically 4 to 6
# Create Cluster with desired number of cores. Don't use them all! Your computer is running other processes.
cl <- makeCluster(2)
# Register Cluster
registerDoParallel(cl)
# Confirm how many cores are now "assigned" to R and RStudio
getDoParWorkers() # Result 2
plot_ly(iphone, x= ~iphonesentiment, type='histogram')
nzvMetrics <- nearZeroVar(iphone, saveMetrics = TRUE)
nzvMetrics
factorsFIN <- read_csv("concat_factorsFIN.csv")
websitesFIN <- read_csv("concat_websitesFIN.csv")
iphone <- read_csv("iphone_smallmatrix_labeled_8d.csv")
galaxy <- read_csv("galaxy_smallmatrix_labeled_9d (1).csv")
getwd()
setwd("/Users/gherardolattanzi/Desktop/sentimentanalysis/Sentiment")
factorsFIN <- read_csv("concat_factorsFIN.csv")
websitesFIN <- read_csv("concat_websitesFIN.csv")
iphone <- read_csv("iphone_smallmatrix_labeled_8d.csv")
galaxy <- read_csv("galaxy_smallmatrix_labeled_9d (1).csv")
getwd()
setwd("/Users/gherardolattanzi/Desktop/sentimentanalysis/Sentiment")
rfeResults <- rfe(iphoneSample[,1:58],
iphoneSample$iphonesentiment,
sizes=(1:58),
rfeControl=ctrl)
set.seed(123)
iphoneSample <- iphone[sample(1:nrow(iphone), 1000, replace=FALSE),]
rfeResults <- rfe(iphoneSample[,1:58],
iphoneSample$iphonesentiment,
sizes=(1:58),
rfeControl=ctrl)
ctrl <- rfeControl(functions = rfFuncs,
method = "repeatedcv",
repeats = 3,
verbose = FALSE)
rfeResults <- rfe(iphoneSample[,1:58],
iphoneSample$iphonesentiment,
sizes=(1:58),
rfeControl=ctrl)
rfeResults
plot(rfeResults, type=c("g", "o"))
library(readr)
library(ggplot2)
library(doParallel)
library(plotly)
library(caret)
library(corrplot)
detectCores() # Result = Typically 4 to 6
# Create Cluster with desired number of cores. Don't use them all! Your computer is running other processes.
cl <- makeCluster(2)
# Register Cluster
registerDoParallel(cl)
# Confirm how many cores are now "assigned" to R and RStudio
getDoParWorkers() # Result 2
set.seed(123)
part.index <- createDataPartition(iphoneRFE$iphonesentiment,
p = 0.75,
list = FALSE)
iTrain <- iphoneRFE[ part.index,]
iTest  <- iphoneRFE[-part.index,]
library(caretEnsemble)
set.seed(123)
my_control <- trainControl(method = "cv",
number = 3,
savePredictions = "final")
set.seed(222)
model_list <- caretList(iTrain, iTrain$iphonesentiment,
trControl = my_control,
methodList = c("lm", "svmRadial",
"xgbTree", "knn"),
tuneList = NULL,
continue_on_fail = FALSE,
preProcess = c("center","scale"))
pred_RMSE <- data.frame(
LM = RMSE(pred_lm, iTest$iphonesentiment),
SVM = RMSE(pred_svm, iTest$iphonesentiment),
XGBT = RMSE(pred_xgbT, iTest$iphonesentiment),
XGBL = RMSE(pred_xgbL, iTest$iphonesentiment))
print(pred_RMSE)
options(digits = 3)
model_results <- data.frame(
LM = min(model_list$lm$results$RMSE),
SVM = min(model_list$svmRadial$results$RMSE),
XGBT = min(model_list$xgbTree$results$RMSE),
KNN = min(model_list$knn$results$kappa)
)
print(model_results)
model_results <- data.frame(
LM = min(model_list$lm$results$RMSE),
SVM = min(model_list$svmRadial$results$RMSE),
XGBT = min(model_list$xgbTree$results$RMSE),
KNN = min(model_list$knn$results$kappa)
)
model_list <- caretList(iTrain, iTrain$iphonesentiment,
trControl = my_control,
methodList = c("lm", "svmRadial",
"xgbTree", "knn"),
tuneList = NULL,
continue_on_fail = FALSE,
preProcess = c("center","scale"))
set.seed(222)
model_list <- caretList(iTrain, iTrain$iphonesentiment,
trControl = my_control,
methodList = c("kknn", "knn"),
tuneList = NULL,
continue_on_fail = FALSE,
preProcess = c("center","scale"))
options(digits = 3)
model_results <- data.frame(
KKNN = min(model_list$kknn$results$kappa),
KNN = min(model_list$knn$results$kappa)
)
print(model_results)
model_results <- data.frame(
KKNN = (model_list$kknn$results$kappa),
KNN = (model_list$knn$results$kappa)
)
print(model_results)
model_list <- caretList(iTrain, iTrain$iphonesentiment,
trControl = my_control,
methodList = c("kknn", "knn"),
tuneList = NULL,
continue_on_fail = FALSE,
preProcess = c("center","scale"))
options(digits = 3)
model_results <- data.frame(
KKNN = (model_list$kknn$results$kappa),
KNN = (model_list$knn$results$kappa)
)
print(model_results)
